# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  branches:
    include:
      - dev
      - main

pool:
  name: 'MySelfHostedpool'
  demands: []

steps:
  - checkout: self
    clean: false
    
  # Setup JDK 21 dynamically
  - powershell: |
      $jdkFolder = "$(Pipeline.Workspace)\jdk"
      $jdkZip = "$(Pipeline.Workspace)\jdk.zip"

      if (-Not (Test-Path $jdkFolder)) {
        Write-Host "JDK not found, downloading..."
        Invoke-WebRequest -Uri "https://download.oracle.com/java/21/latest/jdk-21_windows-x64_bin.zip" -OutFile $jdkZip
        Expand-Archive $jdkZip -DestinationPath $jdkFolder -Force
      } else {
        Write-Host "JDK already exists, skipping download & extraction."
      }

      $jdkPath = Get-ChildItem $jdkFolder | Select-Object -First 1 -ExpandProperty FullName
      echo "##vso[task.setvariable variable=JAVA_HOME]$jdkPath"
      echo "##vso[task.prependpath]$jdkPath\bin"
      java -version
    displayName: "Download & Setup JDK 21"

  # Prepare SonarCloud Analysis (CLI mode, before build)
  - task: SonarCloudPrepare@3
    inputs:
      SonarCloud: 'SonarCloudServiceConnection'   # <-- Service connection to your SonarCloud
      organization: 'devanshi-rangras'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'Devanshi-Rangras_sample-job-portal'
      cliProjectName: 'JobPortal'
      cliSources: 'backend,frontend'
      extraProperties: |
        sonar.java.binaries=backend/target/classes
        sonar.junit.reportPaths=backend/target/surefire-reports
        sonar.coverage.jacoco.xmlReportPaths=backend/target/site/jacoco/jacoco.xml
        sonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info

        # Exclude node_modules and build outputs
        sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        sonar.test.exclusions=**/*.test.js,**/*.spec.js
    displayName: "Prepare SonarCloud Analysis (CLI Pre-Build)"
  
  # Setup Apache Maven
  - powershell: |
      $mavenFolder = "$(Pipeline.Workspace)\maven"
      $mavenZip = "$(Pipeline.Workspace)\maven.zip"

      if (-Not (Test-Path $mavenFolder)) {
        Write-Host "Maven not found, downloading..."
        Invoke-WebRequest -Uri "https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip" -OutFile $mavenZip
        Expand-Archive $mavenZip -DestinationPath $mavenFolder -Force
      } else {
        Write-Host "Maven already exists, skipping download & extraction."
      }

      $mavenPath = Get-ChildItem $mavenFolder | Select-Object -First 1 -ExpandProperty FullName
      echo "##vso[task.setvariable variable=MAVEN_HOME]$mavenPath"
      echo "##vso[task.prependpath]$mavenPath\bin"
    displayName: "Download & Setup Apache Maven"
  
  # Verify Maven
  - powershell: |
      mvn -version
    displayName: "Verify Maven Installation"

  # Build & Test Backend with Maven
  - script: |
      mvn -f backend/pom.xml clean verify
    displayName: "Build & Test Backend (Maven)"
  
  # Check backend bytecode
  - script: |
      if exist backend\target (
        echo "Backend target folder exists."

        if exist backend\target\classes (
          echo "Compiled classes found in backend\target\classes"
          dir backend\target\classes
        ) else (
          echo "No compiled classes in backend\target\classes"
        )

        if exist backend\target\surefire-reports (
          echo "Surefire test reports exist in backend\target\surefire-reports"
          dir backend\target\surefire-reports
        ) else (
          echo "No test reports in backend\target\surefire-reports"
        )
      ) else (
        echo "backend\target folder not found! Maybe Maven build did not run?"
      )
    displayName: "Check Backend Bytecode"

  # Build & Test Frontend (npm)
  - script: |
      cd frontend
      npm install
      npm test -- --coverage
    displayName: "Build & Test Frontend"
  
  # Check coverage file
  - script: |
      if exist frontend\coverage (
        echo "Listing frontend/coverage folder..."
        dir frontend\coverage

        if exist frontend\coverage\lcov.info (
          echo "Showing first 20 lines of lcov.info..."
          powershell -Command "Get-Content frontend/coverage/lcov.info -TotalCount 20"
        ) else (
          echo "lcov.info not found!"
        )
      ) else (
        echo "frontend\coverage folder not found!"
      )
    displayName: "Check Coverage File"
  
  # Run SonarCloud Analysis
  - task: SonarCloudAnalyze@3
    displayName: "Run SonarCloud Analysis"
  
  # Publish SonarCloud Quality Gate
  - task: SonarCloudPublish@3
    inputs:
      pollingTimeoutSec: '300'
    displayName: "Publish SonarCloud Quality Gate"
